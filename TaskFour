#Write a function which takes as an input a word pair (a,b) and your frequency structure from #3. The function returns a probability of this pair (a,b) and a probability of (a,-b), i.e. all the word pairs where word “a” is in the first position and in the second 
#position is the forward different than “b”.
#--> should this function take any other input to make the calculations more efficient if we call it many times for different word pairs but frequencies are collected based on the same corpus?

import re
from heapq import nlargest

class TaskFour():

    file = None

    freq = []
    pairs = []

    def __init__(self):
        try:
            self.file = open("corpus.txt", "r")
        except:
            print("Couldn't load the corpus")

    def analyzeFreq(self):
        dict = {}
        for line in self.file:
            #Spliting the lines into words using regular expressions
            words = re.findall(r"[\w]+", line)
            #for each word in the array check if it's in the global array of words, otherwise append it and increment the freq array at it' point
            for i in range(0, len(words)):
                if(i != len(words)-1):
                    w1 = words[i].lower()
                    w2 = words[i+1].lower()

                    tp = tuple((w1,w2))

                    if(tp in dict):
                        dict[tp] += 1
                    else:
                        dict[tp] = 1

        top = nlargest(10, dict.values())
        toReturn = []
        for w,w1 in dict.items():
            if(w1 in top):
                toReturn.append(tuple((w,w1)))
        return toReturn

    def getPairs(self):
        dict = {}
        for line in self.file:
            #Spliting the lines into words using regular expressions
            words = re.findall(r"[\w]+", line)
            #for each word in the array check if it's in the global array of words, otherwise append it and increment the freq array at it' point
            for i in range(0, len(words)):
                if(i != len(words)-1):
                    w1 = words[i].lower()
                    w2 = words[i+1].lower()

                    tp = tuple((w1,w2))

                    if(tp in dict):
                        dict[tp] += 1
                    else:
                        dict[tp] = 1
        return dict

    def getProbability(self, a, b, dict):
        ab = dict[tuple((a,b))]/len(dict)
        print("The probability of the pair("+a+", "+b+") is: " + str(ab))

        i=0
        for w1, w2 in dict:
            if(w1 == a and w2 != b):
                i = dict[tuple((w1,w2))]

        aMinusB = i/len(dict)
        print("The probability of the pair("+a+", -"+b+") is: " + str(aMinusB))






a = TaskFour()
dict = a.getPairs()
print(a.analyzeFreq())
print(dict)
print(a.getProbability('the', 'department', dict))
